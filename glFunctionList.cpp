// This only exists to make formatting look nice
#ifndef OPENGL_FUNCTION
    #define OPENGL_FUNCTION(type, name)
    #include <GL/glext.h>
#endif

// Buffers
OPENGL_FUNCTION(PFNGLBINDBUFFERPROC, glBindBuffer)
OPENGL_FUNCTION(PFNGLBINDBUFFERBASEPROC, glBindBufferBase)
OPENGL_FUNCTION(PFNGLGENBUFFERSPROC, glGenBuffers)
OPENGL_FUNCTION(PFNGLBUFFERDATAPROC, glBufferData)
OPENGL_FUNCTION(PFNGLBUFFERSUBDATAPROC, glBufferSubData)

// Vertex Arrays
OPENGL_FUNCTION(PFNGLBINDVERTEXARRAYPROC, glBindVertexArray)
OPENGL_FUNCTION(PFNGLGENVERTEXARRAYSPROC, glGenVertexArrays)
OPENGL_FUNCTION(PFNGLVERTEXATTRIBPOINTERPROC, glVertexAttribPointer)
OPENGL_FUNCTION(PFNGLENABLEVERTEXATTRIBARRAYPROC, glEnableVertexAttribArray)
OPENGL_FUNCTION(PFNGLBINDVERTEXBUFFERPROC, glBindVertexBuffer)
OPENGL_FUNCTION(PFNGLVERTEXATTRIBFORMATPROC, glVertexAttribFormat)
OPENGL_FUNCTION(PFNGLVERTEXATTRIBBINDINGPROC, glVertexAttribBinding)

// Programs
OPENGL_FUNCTION(PFNGLCREATEPROGRAMPROC, glCreateProgram)
OPENGL_FUNCTION(PFNGLATTACHSHADERPROC, glAttachShader)
OPENGL_FUNCTION(PFNGLLINKPROGRAMPROC, glLinkProgram)
OPENGL_FUNCTION(PFNGLUSEPROGRAMPROC, glUseProgram)

// Shaders
OPENGL_FUNCTION(PFNGLCREATESHADERPROC, glCreateShader)
OPENGL_FUNCTION(PFNGLDELETESHADERPROC, glDeleteShader)
OPENGL_FUNCTION(PFNGLSHADERSOURCEPROC, glShaderSource)
OPENGL_FUNCTION(PFNGLCOMPILESHADERPROC, glCompileShader)
OPENGL_FUNCTION(PFNGLGETSHADERIVPROC, glGetShaderiv)
OPENGL_FUNCTION(PFNGLGETSHADERINFOLOGPROC, glGetShaderInfoLog)

// Uniforms
OPENGL_FUNCTION(PFNGLGETUNIFORMLOCATIONPROC, glGetUniformLocation)
OPENGL_FUNCTION(PFNGLUNIFORM1FPROC, glUniform1f)
OPENGL_FUNCTION(PFNGLUNIFORM2FPROC, glUniform2f)
OPENGL_FUNCTION(PFNGLUNIFORM3FPROC, glUniform3f)
OPENGL_FUNCTION(PFNGLUNIFORM3FPROC, glUniform4f)
OPENGL_FUNCTION(PFNGLUNIFORM1IPROC, glUniform1i)
OPENGL_FUNCTION(PFNGLUNIFORM2DPROC, glUniform2d)
OPENGL_FUNCTION(PFNGLUNIFORMMATRIX2FVPROC, glUniformMatrix2fv)
OPENGL_FUNCTION(PFNGLUNIFORMMATRIX3FVPROC, glUniformMatrix3fv)
OPENGL_FUNCTION(PFNGLUNIFORMMATRIX3FVPROC, glUniformMatrix4fv)

// Textures
OPENGL_FUNCTION(PFNGLACTIVETEXTUREPROC, glActiveTexture)
